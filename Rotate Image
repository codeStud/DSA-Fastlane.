// You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

// You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

// Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
// Output: [[7,4,1],[8,5,2],[9,6,3]]

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        // In order to rotate clockwise, first reverse the rows
        // 1 2 3        7 8 9
        // 4 5 6   ==>  4 5 6
        // 7 8 9        1 2 3
        reverse(matrix.begin(), matrix.end());
        
        // Then just swap the diagonally opposite elements
        for(int i = 0; i < matrix.size(); i++){
            for(int j = i+1; j < matrix[i].size(); j++){
                swap(matrix[i][j], matrix[j][i]);
            }
        }
    }
};

// ````````````````````````````````````TO ROTATE ANTICLOCKWISE````````````````````````````````

// Step1: Reverse the columns
// 1 2 3       3 2 1
// 4 5 6  ==>  6 5 4
// 7 8 9       9 8 7

// for(auto row : matrix){
//     resverse(row.begin(), row.end());
// }

// Step2: Swap the diagonally opposite elements
// 1 2 3       3 2 1       3 6 9
// 4 5 6  ==>  6 5 4 ==>   2 5 8
// 7 8 9       9 8 7       1 4 7

// for(int i = 0; i < matrix.size(); i++){
//     for(int j = i+1; j < matrix[i].size(); j++){
//         swap(matrix[i][j], matrix[j][i]);
//     }
// }

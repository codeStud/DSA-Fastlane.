// Given the head of a linked list, remove the nth node from the end of the list and return its head.

// NOTE - do this in one pass.

// Input: head = [1,2,3,4,5], n = 2
// Output: [1,2,3,5]


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        // To do it in SINGLE PASS, keep 2 ptr, fast = head and slow = NUll inititally.
        ListNode *fast = head, *slow =NULL;
        ListNode *temp;
        
        // move fast to the n-1th node 
        for(int i = 0; i < n; i++){
            fast = fast->next;
        }
        
        // is fast becomes NULL then head has to be deleted
        if(fast == NULL){
            temp = head;
            head = head->next;
            delete(temp);
            return head;
        }
        
        // if fast is not NULL, then keep moving fast and slow ptr one step at a time
        while(fast){
            
            if(!slow){
                slow = head;
                fast = fast->next;
            }
            else{
                slow = slow->next;
                fast = fast->next;
            }
            
        }
        // slow will now point to the node prev to the node to be deleted
        temp = slow->next;
        slow->next = temp->next;
        delete(temp);
        return head;
        
    }        
};

// Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

// Input: [0,1,0,3,12]
// Output: [1,3,12,0,0]

// You must do this in-place without making a copy of the array.
// Minimize the total number of operations.

// Maintain the index to the leftMost 0. (zeroIndex)
// Whenever you get a non-zero element, swap it with nums[zeroIndex], i.e swap it with leftMost 0
// Then keep incrementing the zeroIndex pointer until you find a 0, which will be the leftMost 0.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        // Keep tack of index of the leftMost 0
        int zeroIndex = -1;
        
        // Loop through the array once.
        for(int i = 0; i < nums.size(); i++){
            
            // If this is the first 0 you see, set this index as the zeroIndex (leftMost 0)
            if(zeroIndex == -1 && nums[i] == 0){
                zeroIndex = i;
            }
            
            // else if the element is non-zero and there exits at least one 0 (i.e zeroIndex != -1) => swap
            else if(nums[i] != 0 && zeroIndex != -1){
                swap(nums[i], nums[zeroIndex]);
                // Increment the zeroIndex by 1 & it'll point to the leftMost 0
                zeroIndex += 1;
            }
            
        }
        
    }
};

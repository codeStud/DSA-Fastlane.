// Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

// Notice that the solution set must not contain duplicate triplets.

// Input: nums = [-1,0,1,2,-1,-4]
// Output: [[-1,-1,2],[-1,0,1]]

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
 
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size(); i++){
            // fix the nums[i] as one of the triplets and convert the problem to 
            // twoSum problem having sum = target
            int target = -nums[i];
            
            // No need to use hashMap to find the other two numbers. Use 2 pointer approach.
            int low = i+1;
            int high = nums.size()-1;
            while(low < high){
                
                // if sum is less than target, move right (since sorted)
                if(nums[low] + nums[high] < target)
                    low += 1;
                
                // if sum is greater than the target, move left
                else if(nums[low] + nums[high] > target)
                    high -= 1;
                
                else{
                    
                    vector <int> triplet = {nums[i], nums[low], nums[high]};
                    res.push_back(triplet);
                    
        // If the three numbers formed a solution, we can safely ignore all the duplicates of them.
                    
                     // Processing duplicates of Number 2
                // Rolling the front pointer to the next different number forwards
                    while(low < high && nums[low] == triplet[1])
                        low += 1;
                    
                    // Processing duplicates of Number 3
                // Rolling the back pointer to the next different number backwards
                    while(low < high && nums[high] == triplet[2])
                        high -= 1;
                }
                
            }
            // Processing duplicates of Number 1
            while(i+1 < nums.size() && nums[i] == nums[i+1])
                i += 1;
        }
                     
        return res;
    }
};

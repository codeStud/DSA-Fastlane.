// Given the root of a binary tree, return its maximum depth.

// A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

// Input: root = [3,9,20,null,null,15,7]
// Output: 3

// Input: root = [1,null,2]
// Output: 2

// Input: root = [0]
// Output: 1

// Here, the difinition of depth has been changed to make the question "appear" little different from usual.
class Solution {
public:
    int maxDepth(TreeNode* root) {
        // base cases
        if(root == NULL)    return 0;
        // depth  = 1 for a leaf node
        // No need of this base case but included to make the code faster
        else if(!root->left && !root->right) return 1;
        // for non leaf node, consider that node + max(depth of left subtree, depth of right subtree)
        else{
            return (1 + max(maxDepth(root->left), maxDepth(root->right)));
        }
        
    }
};

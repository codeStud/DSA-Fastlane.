// Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

// Input: l1 = [1,2,4], l2 = [1,3,4]
// Output: [1,1,2,3,4,4]

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        // take a dummy node
        ListNode *dummy = new ListNode();
        dummy->val = INT_MIN;
        dummy->next = NULL;
            
        // take a pointer to merge list to be returned and point it to dummy node initially.
        // tail will always point to the last node of the merged list
        ListNode *tail = dummy;
        
        while(l1 && l2){
            // point tail to the smaller value node and increment the ptr of the smaller node
            if(l1->val < l2->val){
                tail->next = l1;
                l1 = l1->next;
            }
            else{
                tail->next = l2;
                l2 = l2->next;
            }
            // increment the tail ptr to point to the last node in the merged list
            tail = tail->next;
        }
        // at last, check which of the two list still remains. Then point the tail->next to the remaining list
        tail->next = l1 ? l1 : l2;
        // Don't return the dummy node at last, return the valid entry node i.e dummy->next.
        // since initially tail was pointing to the dummy node. So, dummy->next is the head of the merged list
        return dummy->next;     
        
    }
};

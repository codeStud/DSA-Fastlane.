// Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

// A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

// Input: nums = [-10,-3,0,5,9]
// Output: [0,-3,9,-10,null,5]
// Explanation: [0,-10,5,null,-3,null,9] is also accepted:

// Input: nums = [1,3]
// Output: [3,1]
// Explanation: [1,3] and [3,1] are both a height-balanced BSTs.

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        // if nums size is 0 return null
        if(nums.size() == 0){
            return NULL;
        }
        
        // make a node with the mid value of the array to keep the bst balanced
        int mid = nums.size() / 2;
        TreeNode *node = new TreeNode(nums[mid]);
        // create two vectors for storing left part and right part of the mid element during the recursive call
        vector <int> leftArr (nums.begin(), nums.begin() + mid);
        vector <int> rightArr (nums.begin()+mid+1, nums.end());
        // set the mid value of the leftArr as node->left
        node->left = sortedArrayToBST(leftArr);
        // set the mid value of rightArr as node->right
        node->right = sortedArrayToBST(rightArr);
        
        return node;
        
    }
};

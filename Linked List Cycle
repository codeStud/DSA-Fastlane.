// Given head, the head of a linked list, determine if the linked list has a cycle in it.

// There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
// Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

// Return true if there is a cycle in the linked list. Otherwise, return false.

// Input: head = [3,2,0,-4], pos = 1
// Output: true
// Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

// Input: head = [1,2], pos = 0
// Output: true
// Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

// If list has cycle, then both pointers are now in the cycle. Consider two runners running in a cycle - the fast runner moves 2 steps while the slow runner moves 1 steps 
// at a time. Since the speed difference is 1, it takes {distance between the 2 runners} / {difference of speed} loops for the fast runner to catch up with the slow runner. 
// As the distance is at most "cyclic length K" and the speed difference is 1, we conclude that {Number of iterations} = almost "cyclic length K".

// Therefore, the worst case time complexity is O(N+K), which is O(n).
class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        // keep two pointers, slow and fast.
        // Move the slow pointer by 1 and fast pointer by 2
        ListNode *slow, *fast;
        slow = fast = head;
        // if fast ends up to be null (or last node), then no cycle
        while(fast != NULL && fast->next != NULL){   
            slow = slow->next;
            fast = fast->next->next;
            // if the pointers meet again (apart from initially = head) ==> cycle exists
            if(slow == fast)
                return true;
        }
        return false;
    }
};

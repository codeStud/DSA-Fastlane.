// You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
// the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and 
// it will automatically contact the police if two adjacent houses were broken into on the same night.

// Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

// Input: nums = [1,2,3,1]
// Output: 4
// Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
// Total amount you can rob = 1 + 3 = 4.

// Input: nums = [2,7,9,3,1]
// Output: 12
// Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
// Total amount you can rob = 2 + 9 + 1 = 12.

class Solution {
public:
    int rob(vector<int>& nums) {
        // TEST CASE YOU MIGHT MISS = [4,0,0,8] --> rob 4 then again rob 8. thus max = 12 and not 8
        // Similary [0,2,0,0,2]
        
        // For each house, we have 2 choices -
        // 1. Rob it => loot[i] = nums[i] + loot[i-2], as robbed houses can't be connected.
        // 2. Don't rob it => loot[i] = loot[i-1], i.e same as the previous loot value
        
        int n = nums.size();
        if(n == 0)  return 0;
        if(n == 1)  return nums[0];
        
        // loot will store the max loot value at till that corresponding house index
        vector <int> loot(n);
        // Base cases
        loot[0] = nums[0];
        loot[1] = max(nums[0], nums[1]);
        
        for(int i = 2; i < n; i++){
            // Take the max of case1 and case2
            loot[i] = max(loot[i-1], nums[i] + loot[i-2]);            
        }
        // last index of loot[] will store the max loot value
        return loot[n-1];
    }
};

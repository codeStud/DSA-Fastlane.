// Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

// The number of elements initialized in nums1 and nums2 are m and n respectively. 
// You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.

// Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
// Output: [1,2,2,3,5,6]

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // let's traverse from back
        int i = m-1;    // last index of nums1 elements
        int j = n-1;    // last index of nums2
        int k = m+n-1;  // last index of merged array, i.e nums1 (since nums1 has enough space as given in ques.)
        
        // remember that both the given arrays are already sorted
        while(i >= 0 && j >=0){
            // put the largest element at last index of the merged array
            if(nums1[i] < nums2[j]){
                nums1[k--] = nums2[j--];
            }
            else{
                nums1[k--] = nums1[i--];
            }
                
        }
        
        // at last, copy the remaining elements from nums2 if there are any...
        // no need to check if nums1 has remaining elements bcz we are storing in nums1 which is already
        // sorted.
        while(j >= 0)
            nums1[k--] = nums2[j--];
    }
};

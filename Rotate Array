// Given an array, rotate the array to the right by k steps, where k is non-negative.
// Do it without using extra space.

// Input: nums = [1,2,3,4,5,6,7], k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]

class Solution {
public:
      
    void rotate(vector<int>& nums, int k) {
        
        int n = nums.size();
        if(k > n) 
            k = k % n;
        
        //  It reverses the order of the elements in the range [first, last) of any container.
        std::reverse(nums.begin(), nums.end());
        std::reverse(nums.begin(), nums.begin()+k);
        std::reverse(nums.begin()+k, nums.end());
    }
};

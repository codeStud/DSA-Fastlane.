// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

// Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        // keep the track of two currentSum and maxSum.
        int curSum = nums[0], maxSum = nums[0];
        for(int i = 1; i < nums.size(); i++){
            // if current value is greater than the previous contiguous subarray sum + current value, 
            // update curSum to current value.
            curSum = max(nums[i], curSum += nums[i]);
            // update the maxSum
            if(maxSum < curSum)
                maxSum = curSum;
        }
        
        return maxSum;
    }
};
